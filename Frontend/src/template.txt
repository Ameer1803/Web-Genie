const aiGeneratedCode = `
  const { useState } = React;
  export default function TicTacToe() {
    const [squares, setSquares] = useState(Array(9).fill(null));
    const [xIsNext, setXIsNext] = useState(true);

    function handleClick(i) {
      if (squares[i] || calculateWinner(squares)) return;
      const nextSquares = squares.slice();
      nextSquares[i] = xIsNext ? 'X' : 'O';
      setSquares(nextSquares);
      setXIsNext(!xIsNext);
    }

    function calculateWinner(sq) {
      const lines = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6],
      ];
      for (let [a, b, c] of lines) {
        if (sq[a] && sq[a] === sq[b] && sq[a] === sq[c]) return sq[a];
      }
      return null;
    }

    const winner = calculateWinner(squares);
    const status = winner ? "Winner: " + winner : "Next player: " + (xIsNext ? 'X' : 'O');

    return (
      <div className="flex flex-col items-center mt-10">
        <div className="text-xl font-bold mb-4">{status}</div>
        <div className="grid grid-cols-3 gap-2">
          {squares.map((val, i) => (
            <button
              key={i}
              className="w-16 h-16 text-2xl border bg-white hover:bg-gray-100"
              onClick={() => handleClick(i)}
            >
              {val}
            </button>
          ))}
        </div>
      </div>
    );
  }
`;

const aiGenCode = `
  const { useState } = React;

  export default function TodoApp() {
    const [todos, setTodos] = useState([
      { id: 1, text: 'Learn React', completed: false },
      { id: 2, text: 'Build AI-powered app', completed: false },
    ]);
    const [newTodo, setNewTodo] = useState('');
    const [filter, setFilter] = useState('all'); // all, active, completed

    function addTodo() {
      if (!newTodo.trim()) return;
      setTodos([...todos, { id: Date.now(), text: newTodo.trim(), completed: false }]);
      setNewTodo('');
    }

    function toggleTodo(id) {
      setTodos(todos.map(todo =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      ));
    }

    function removeTodo(id) {
      setTodos(todos.filter(todo => todo.id !== id));
    }

    const filteredTodos = todos.filter(todo => {
      if (filter === 'active') return !todo.completed;
      if (filter === 'completed') return todo.completed;
      return true;
    });

    return (
      <div className="max-w-md mx-auto mt-10 p-4 bg-white rounded shadow">
        <h2 className="text-2xl font-bold mb-4">Todo List</h2>

        <div className="flex mb-4">
          <input
            type="text"
            value={newTodo}
            onChange={e => setNewTodo(e.target.value)}
            placeholder="Add a new task"
            className="flex-grow border rounded px-3 py-2 mr-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
          />
          <button
            onClick={addTodo}
            className="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700"
          >
            Add
          </button>
        </div>

        <div className="mb-4 flex space-x-2">
          <button
            onClick={() => setFilter('all')}
            className={\`px-3 py-1 rounded \${filter === 'all' ? 'bg-indigo-600 text-white' : 'bg-gray-200'}\`}
          >
            All
          </button>
          <button
            onClick={() => setFilter('active')}
            className={\`px-3 py-1 rounded \${filter === 'active' ? 'bg-indigo-600 text-white' : 'bg-gray-200'}\`}
          >
            Active
          </button>
          <button
            onClick={() => setFilter('completed')}
            className={\`px-3 py-1 rounded \${filter === 'completed' ? 'bg-indigo-600 text-white' : 'bg-gray-200'}\`}
          >
            Completed
          </button>
        </div>

        <ul>
          {filteredTodos.length === 0 && (
            <li className="text-gray-500 italic">No tasks to display</li>
          )}
          {filteredTodos.map(todo => (
            <li
              key={todo.id}
              className="flex items-center justify-between py-2 border-b"
            >
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={todo.completed}
                  onChange={() => toggleTodo(todo.id)}
                />
                <span className={todo.completed ? 'line-through text-gray-400' : ''}>
                  {todo.text}
                </span>
              </label>
              <button
                onClick={() => removeTodo(todo.id)}
                className="text-red-500 hover:text-red-700 font-bold"
                aria-label="Remove todo"
              >
                &times;
              </button>
            </li>
          ))}
        </ul>
      </div>
    );
  }
`;